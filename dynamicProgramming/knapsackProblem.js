// Задача о рюкзаке на js
// отличная статья с объяснением на Java https://skillbox.ru/media/code/dinamicheskoe_programmirovanie_eto_prosto_reshaem_zadachu_o_ryukzake/

const t = [{w: 1, p: 1500},  {w: 4, p: 3000}, {w: 3, p: 2000}]
const w = 4

const bag = (items, w) => {
    // таблица в виде двумерного массива для сохранения промежуточного результата ценностей заполняется нулями
    // строка в таблице соответствует предмету (гитара, бензопила, ноутбук), а столбцы - киллограммам (от одного до 4)
    // заполняется на 1 элемент больше в строке и в столбце, чтобы потом обращаться к предыдущему элементу
    const b = Array.from({length: items.length + 1}, () => Array.from({length: w + 1} , () => 0))

    for(let i = 0; i < (items.length + 1); i++) { // обход по каждой строке, i - строка
        for (let j = 0; j < (w + 1); j++) { // обход по каждому киллограмму, j - столбец
            if(i === 0 || j === 0) continue // первая строку и первый столбец не заполняются, т.к. они являются опорными
            if(items[i-1].w > j) b[i][j] = b[i-1][j] // если вес текущего предмета больше веса текущего столбца - записываем результат из предыдущей строки по данному столбцу
            else { // в противном случае обновляем максимальным значением в предыдущей строке в текщуем столбце и новым значением, которое расчитывется следующим образом:
              const prev = b[i-1][j] // стоимость текущего предмета + новую макс цену (берется пред строка, столбец расчитывается след образом) 
              const next = (items[i - 1].p) + (b[i-1]?.[j - items[i-1].w]) // + b[пред.строка][вес = тек.вес - вес тек.предмета]
              b[i][j] = Math.max(prev,next) 
            }
        }
    }

    return b[items.length][w]
}
bag(t, w)
